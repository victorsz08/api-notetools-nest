generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contract {
  id               String        @id @map("id")
  number           Int           @map("number")
  local            String        @map("local")
  phone            String        @map("phone")
  observation String?
  phoneSecondary   String?
  installationDate DateTime      @map("installationDate")
  installationHour String        @map("installationHour")
  products         String[]      @map("products")
  price            Float         @map("price")
  status           Status        @default(PENDENTE) @map("status")
  userId           String        @map("userId")
  createdAt        DateTime      @default(now()) @map("createdAt")
  updatedAt        DateTime      @map("updatedAt")
  type             TypeContract?
  User             User          @relation(fields: [userId], references: [id])
}

model Countries {
  id        Int      @id @unique
  country   String
  uf        String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Goals {
  id        String   @id
  goal      Float
  user_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      User     @relation(fields: [user_id], references: [id])
}

model Notes {
  id        String   @id @map("id")
  text      String   @map("text")
  user_id   String   @map("user_id")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @map("updatedAt")
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model OwnerTeam {
  owner_id  String   @unique
  team_id   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  Team      Team     @relation(fields: [team_id], references: [id])

  @@id([owner_id, team_id])
}

model Team {
  id        String     @id
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime
  OwnerTeam OwnerTeam?
  User      User[]
}

model User {
  id           String        @id @map("id")
  username     String        @unique @map("username")
  name         String        @map("name")
  lastname     String        @map("lastname")
  role         Role          @default(USER) @map("role")
  password     String        @map("password")
  createdAt    DateTime      @default(now()) @map("createdAt")
  updatedAt    DateTime      @map("updatedAt")
  team_id      String?
  accessStatus AccessStatus? @default(ACTIVE)
  contract     Contract[]
  goals        Goals[]
  notes        Notes[]
  OwnerTeam    OwnerTeam?
  Team         Team?         @relation(fields: [team_id], references: [id])
}

enum AccessStatus {
  ACTIVE
  REVOGED
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum Status {
  PENDENTE
  CANCELADO
  CONECTADO
}

enum TypeContract {
  BASE
  PROSPECT
}
